// 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。


关键还是要做位与运算来判断是否位为1

function NumberOf1(n)
{
    // write code here
        var count = 0;
        var flag = 1;
        while (flag != 0) {
            if ((n & flag) != 0) {
                count++;
            }
            flag = flag << 1;
        }
        return count;
}

count是用来计算位与为真也就是11位与时候的次数
flag每次1左移 js是有符号的32位  所以以上会浪费大量的空间
使得flag位移至有符号至负数也就是32位时候

最优解
        var count = 0;
        while (n != 0) {
            ++count;
            n = (n - 1) & n;
        }
        return count;


 // 把一个整数 （无论正负或0）减去1，再和原整数做与运算，会把该整数最右边的一个1变为0，例如：110100减1后变为110011，二者进行与操作后，得到110000，最后边的1变为了0，而前面的位都不变。    

 //    这样，我们可以利用这这一结论来从左向右依次将整数的最右边的1变为0，当该整数的所有位为1的位均变为0之后，便统计到了该整数二进制中1的个数。