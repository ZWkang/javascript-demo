// 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法


//思路
//当只有一阶的时候跳法有f(1) = 1
//当有两阶的时候跳法有f(2) = f(2-1)+f(2-2)
//2-2代表一次跳两阶
//当有f(3) = f(3-1)+f(3-2)+f(3-3)
//f(n) = f(n-1)+f(n-2)+....f(n-(n-1))+f(n-n)

f(n-1) = f(0) + f(1)+f(2)+f(3) + ... + f((n-1)-1) =f(0) + f(1) + f(2) + f(3) + ... + f(n-2) 
f(n) = f(0) + f(1) + f(2) + f(3) + ... + f(n-2) +f(n-1) = f(n-1) + f(n-1)

两式简化 f(n) = 2*f(n-1)

              | 1       ,(n=0 ) 
f(n) =     | 1       ,(n=1 )
              | 2*f(n-1),(n>=2)


可以设计递归式
        if (target <= 0) {
            return -1;
        } else if (target == 1) {
            return 1;
        } else {
            return 2 * JumpFloorII(target - 1);
        }


    number = parseInt(number)
    var num=1
    while(--number){
        num*=2
    }
    return num

    这个式子实际上是用的了迭代来替代这个递归
    通过迭代由下至上使得时间复杂度变成O(n) 空间复杂度变为O(1)