// 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
function jumpFloor(number)
{
    // write code here
    var a = []
    if(number==0){
        return 0
    }
    if(number==1){
        return 1
    }
    if(number==2){
        return 2
    }
    var a = 1,b=2,c=0
    for(var i =3;i<=number;i++){
        c = a+b
        a = b
        b = c 
    }
    return c
}


a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);  
b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)  
c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)   
d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2  
e.可以发现最终得出的是一个斐波那契数列：



// 第一阶和第二阶考虑过了，初始当前台阶为第三阶，向后迭代
 
    // 思路：当前台阶的跳法总数=当前台阶后退一阶的台阶的跳法总数+当前台阶后退二阶的台阶的跳法总数
 
    int jumpSum = 0;// 当前台阶的跳法总数
 
    int jumpSumBackStep1 = 2;// 当前台阶后退一阶的台阶的跳法总数(初始值当前台阶是第3阶)
 
    int jumpSumBackStep2 = 1;// 当前台阶后退二阶的台阶的跳法总数(初始值当前台阶是第3阶)